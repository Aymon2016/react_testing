# RTL & JEST

react testing library link
[https://testing-library.com/docs/react-testing-library/cheatsheet](https://testing-library.com/docs/react-testing-library/cheatsheet)

jest dom link
[https://github.com/testing-library/jest-dom](https://github.com/testing-library/jest-dom)

How to test component
1.create a test file as button.test.js
2.import method as  import { render, screen } from '@testing-library/react';
3.import button component as import App from './App';
4.write test code as
test('button has correct initial color', () => {
render(<App />)
const button = screen.getByRole('button', { name: /blue/i });
expect(button).toHaveStyle('background-color:red')
});
5.read doc file
6.this is first react component test code

    import { render, screen, fireEvent } from '@testing-library/react';
    import App from './App';

    describe('red-blue button', () => {
    test('button has correct initial color', () => {
        render(<App />)
        const button = screen.getByRole('button', { name: /blue/i });
        expect(button).toHaveStyle('background-color:red')
    });

    test('button has correct initial text', () => {
        render(<App />)
        const button = screen.getByRole('button', { name: /blue/i });
        expect(button).toHaveTextContent('color is blue')
    });

    test('button turns blue when clicked', () => {
        render(<App />)
        const button = screen.getByRole('button', { name: /blue/i });
        fireEvent.click(button)
        expect(button).toHaveStyle('background-color:blue')
    });

    test('button text changed when clicked', () => {
        render(<App />)
        const button = screen.getByRole('button', { name: /blue/i });
        fireEvent.click(button)
        expect(button).toHaveTextContent('color is red blue')
    });
    })
    Mock Testing

    1.FIRST UTILIS E AKTA FUNTION MAKE KORLAM OI TA MOCK KORBO THEN EXPENSIVE NAME AKTA COMPONENT MAKE KORLAM
2. IMPORT KORBO
        import { render, screen } from '@testing-library/react'
        import Exepensive from './expentsive'
        import { hello } from './utilis/utilis'
3.MOCK KORBO
    jest.mock('./utilis/utilis')
4.THEN TEST LIKBO

    test('expensive content should diplay the result of the hello', () => {
    const expeted = 100
    hello.mockReturnValueOnce(expeted)

    render(<Exepensive />)

    const element = screen.getByTestId('expensivenode');
    expect(element).toBeInTheDocument()
    expect(element).toHaveTextContent(expeted)
})


axios testing
1.import axios from 'axios';

    import Userdata from './userdata';

    jest.mock(axios)

    test('userdata should return the user data', async () => {
        const expectedResult = { id: 1, name: 'aymon' }

        axios.get.mockResolvedValueOnce({ data: expectedResult })

        const userdata = await Userdata(1)
        expect(userdata).toEqual(expectedResult)
    })

2.comonent
    import axios from "axios"

        const Userdata = async (userid) => {

            const response = await axios.get(`https://myapi.com/users/${userid}`)

            return response.data
        }

        export default Userdata
3.then error asheb tokon package.json e ai ta like diba
    "test": "react-scripts test --transformIgnorePatterns \\"node_modules/(?!axios)/\\"",

    terpor o jani nah kotokkon kaj korbe.korer kotha tobe amer kore nais sir er korsilo
pass hoice
Some important method

- [ ]  getByTest() text show korte
- [ ]  toBeInTheDocument() document e file ta ace kina ai func k assertion bola hoi.
- [ ]  test.only sodo oi file test ta run hobe baki gola skipp korbe
- [ ]  test.skip also use for skiping and also use for describe methods
- [ ]  we can also use file name
    - [ ]  xyz.test.js
    - [ ]  xyz.spec.js
    - [ ]  folder name __tests__
        - [ ]  xyz-test.js
- [ ]  if we show coverge test we add in package json file “coverge”:”yarn test —coverge —watchAll”
- [ ]  if we show specific folder test we add in  “coverge”:”yarn test —coverge —watchAll —collectCovergeFrom=’src/component/**/*.{ts,tsx}’”
- [ ]  if we not to coverge typefile “coverge”:”yarn test —coverge —watchAll —collectCovergeFrom=’src/component/**/*.{ts,tsx}’ —collectCovergeFrom=’!src/component/**/*.{types,stories,constants,test,spec}.{ts,tsx}’”
- [ ]  jodi ato parcent code test na kore taile fail dekabe amon o korte pari covergeThreshold er maddome just package json a add kora lagbe
"jest":{
"covergeThreshold":{
"global":{
"branches":80,
"functions":80,
"lines":80,
"statements":-10
}
}
}

[1.to](http://1.to) learn matcher funtion to read jest doc use mather funtion

[Using Matchers · Jest](https://jestjs.io/docs/using-matchers)

[GitHub - testing-library/jest-dom: Custom jest matchers to test the state of the DOM](https://github.com/testing-library/jest-dom)[1.to](http://1.to) learn matcher funtion to read jest doc use mather funtion

[Using Matchers · Jest](https://jestjs.io/docs/using-matchers)

[GitHub - testing-library/jest-dom: Custom jest matchers to test the state of the DOM](https://github.com/testing-library/jest-dom)


- [ ]  What to test?
    
    1.Test component Renders
    
    2.test component renders with props
    
    3.test component renders in different states
    
    4.test component reacts to events

    - [ ]  What not to test?
    
    1.implementation details
    
    2.third party code 
    
    3.code that is not important from a user point of view
    
- [ ]  To find a single element on the page we have queary methods
    
    1.getBy…
    
    2.queryBy…
    
    3.findBy…
    

To find multifle element on the page we have queary methods

1.getAllBy…

2.queryAllBy…

3.findAllBy…

the suffix can be one of Role,LabelText,PlaceHolderText,Text, DisplayValue,AltText,Title and finaly Testid

## Note:getBy role use for suddenly rendered dom .it is not wait for useEffect render.this time we use findBy…

get

getBy : returns the matching node, however will throw an error if multiple matches or no matches are found.
getAllBy : returns an array of matching nodes if at least one match is found and throws an error if no match is found.
Tip : Use these methods if you expect the element / elements to be present upon query.

query

queryBy : returns the matching node if one match is found and null if no match is found, however will throw an error if multiple matches are found.
queryAllBy : returns an array of matching nodes if at least one match is found and an empty array if no match is found.
Tip : Use these methods if you are looking to confirm presence of an element / elements.

find

findBy : returns a promise that returns the matching node, however will throw an error if multiple matches or no matches are found.
findAllBy : returns a promise that returns an array of matching nodes if at least one match is found and throws an error if no match is found.
Tip : Use these methods if the element / elements being queried might display asynchronously (for example, if your element is expected to only display after an event is fired consider using find as it retries the query after some time).

const view = render(<Skills skills={skills} />)
1.logRoles(view.container) use for view dom element;
2.pointer interection method is
1.convenience Apis
1.click()
2.dblclick()
3.hover()
4.tripleClick()
5.rightClick()
6.focus()
7.unhover()
3.pointer Apis
1.pointer({keys:'[mouseRight]'})
2.pointer({keys:'[mouseLeft]'})
3.pointer({keys:'[mouseMiddle]'})
4.pointer({keys:'[mouseLeft][mouseRight]'})
5.pointer({keys:'[mouseLeft][mouseMiddle]'})
6.pointer({keys:'[mouseRight][mouseMiddle]'})

4.utiliy Apis
1.clear()
test('clear', async() => {
render(<textarea defaultValue="hello world/>)
await userEvent.clear(screen.getByRole('textbox))
expect(screen.getByRole('textbox)).toHaveValue('')
})
2.type()
3.paste()
4.upload()
test('upload file', async() => {
render(
<div>
<label>Upload file</label>
<input id="file-uploader" type="file" />
</div>
)
const file = new File(['hello'],'hello.png',{type:'image/png})
const input = screen.getByLabelText(/upload file/i)
await userEvent.upload(input,file)
expect(input.files[0]).toBe(file)
expect(input.files.item(0)).toBe(file)
expect(input.files).toHaveLength(1)

    })

5.download()
6.deselectOptions()
    test('selectOptions', async() => {
    render(
        <select multiple>
        <option value="1">a</option>
        <option value="2">b</option>
        <option value="3">c</option>
         </select>
    )
    await userEvent.deselectOptions(screen.getByRole('listbox),'2')
    expect(screen.getByRole('b').selected).toBe(false)
    })
6.selectOptions()
    test('selectOptions', async() => {
    render(
        <select multiple>
        <option value="1">a</option>
        <option value="2">b</option>
        <option value="3">c</option>
         </select>
    )
    await userEvent.selectOptions(screen.getByRole('listbox),['1','c'])
    expect(screen.getByRole('option',{name:'a;}).selected).toBe(true)
    expect(screen.getByRole('option',{name:'b;}).selected).toBe(false)
    expect(screen.getByRole('option',{name:'c;}).selected).toBe(true)
    })


    7.keyboard Apis
1.cut()
2.copy()
3.paste()

Note that wraper componet test.this is important for redux and state management.
1.we make custom render funtion redux and state management.

```
        import { render } from '@testing-library/react'
        import { AppProviders } from '../provider/appProvider'

        const customRender = (ui, options) =>
            render(ui, { wrapper: AppProviders, ...options })

        // re-export everything
        export * from '@testing-library/react'

        // override render method
        export { customRender as render }

2.then we import and call provider funtion in custom render funtion

```


Note:react hook funtion not return jsx so when we testing react hook.we get error
.then if we call useCounter() also get error.bcz hook not call in funtion
.so rtl provide a hook call funtion
renderHook()
test('should render the initial count', () => {
const { result } = renderHook(useCounter, {
initialProps: {
initialCount: 0,
}
})
expect(result.current.count).toBe(0)
})

Note:fetch funtion test kora onek cost pore tai amder akta server create kore test
kora lage ter jonno amader use korte pari mock service worker library tai

first doc teke msw ta install kori

1.create server.js

    // src/mocks/server.js
    import { setupServer } from 'msw/node'
    import { handlers } from './handlers'

    // This configures a request mocking server with the given request handlers.
    export const server = setupServer(...handlers)
2.create a hander.js file
    import { rest } from 'msw'

        export const handlers = [
            rest.get('<https://jsonplaceholder.typicode.com/users>', (req, res, ctx) => {
                return res(
                    ctx.status(200),
                    ctx.json([
                        {
                            name: 'Bruce Wayne',
                        },
                        {
                            name: 'Clark Kent',
                        },
                        {
                            name: 'Princess Diana',
                        },
                    ])
                )
            }),
        ]
3.setupTest.js file e ai ta add kora lagbe

    // src/setupTests.js
    import { server } from '../src/component/httpMock/msw/server'
    // Establish API mocking before all tests.
    beforeAll(() => server.listen())

    // Reset any request handlers that we may add during the tests,
    // so they don't affect other tests.
    afterEach(() => server.resetHandlers())

    // Clean up after the tests are finished.
    afterAll(() => server.close())
4.complete virtual server make kora akon test korte pari

    test('renders a list of users', async () => {
    render(<Users />)
    const users = await screen.findAllByRole('listitem')
    expect(users).toHaveLength(3)
    })
Note:Describe me static testing tolls name
    
    1.TypeScript
    2.EsLint
    3.Prettier
    4.Husky
    5.lint-staged

    1.eslint already create react app e install take .acara npm i -D eslint-plugin-jest-dom
        then package json e "extends":"plugin:jest-dom/recommended"
    taile aro sobida pabo

    2.same bave prettier o use korte pari format korer jonno.
        npm i --Dev --exact prettirer
        then "script":{
                "format": "prettier --ignore-path .gitignore --write \"**/*.{js,jsx,ts,tsx,json,css,scss,md}\""
            }
            
    
   