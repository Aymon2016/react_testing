

get

getBy : returns the matching node, however will throw an error if multiple matches or no matches are found.
getAllBy : returns an array of matching nodes if at least one match is found and throws an error if no match is found.
Tip : Use these methods if you expect the element / elements to be present upon query.

query

queryBy : returns the matching node if one match is found and null if no match is found, however will throw an error if multiple matches are found.
queryAllBy : returns an array of matching nodes if at least one match is found and an empty array if no match is found.
Tip : Use these methods if you are looking to confirm presence of an element / elements.

find

findBy : returns a promise that returns the matching node, however will throw an error if multiple matches or no matches are found.
findAllBy : returns a promise that returns an array of matching nodes if at least one match is found and throws an error if no match is found.
Tip : Use these methods if the element / elements being queried might display asynchronously (for example, if your element is expected to only display after an event is fired consider using find as it retries the query after some time).

const view = render(<Skills skills={skills} />)
1.logRoles(view.container) use for view dom element;
2.pointer interection method is 
    1.convenience Apis
        1.click()
        2.dblclick()
        3.hover()
        4.tripleClick()
        5.rightClick()
        6.focus()
        7.unhover()
3.pointer Apis
    1.pointer({keys:'[mouseRight]'})
    2.pointer({keys:'[mouseLeft]'})
    3.pointer({keys:'[mouseMiddle]'})
    4.pointer({keys:'[mouseLeft][mouseRight]'})
    5.pointer({keys:'[mouseLeft][mouseMiddle]'})
    6.pointer({keys:'[mouseRight][mouseMiddle]'})

4.utiliy Apis
    1.clear()
        test('clear', async() => {
        render(<textarea defaultValue="hello world/>)
        await userEvent.clear(screen.getByRole('textbox))
        expect(screen.getByRole('textbox)).toHaveValue('')
        })
    2.type()
    3.paste()
    4.upload()
         test('upload file', async() => {
        render(
         <div>
          <label>Upload file</label>
          <input id="file-uploader" type="file" />
         </div>
        )
       const file = new File(['hello'],'hello.png',{type:'image/png})
       const input = screen.getByLabelText(/upload file/i)
       await userEvent.upload(input,file)
       expect(input.files[0]).toBe(file)
        expect(input.files.item(0)).toBe(file)
         expect(input.files).toHaveLength(1)

        })

    5.download()
    6.deselectOptions()
        test('selectOptions', async() => {
        render(
            <select multiple>
            <option value="1">a</option>
            <option value="2">b</option>
            <option value="3">c</option>
             </select>
        )
        await userEvent.deselectOptions(screen.getByRole('listbox),'2')
        expect(screen.getByRole('b').selected).toBe(false)
        })
    6.selectOptions()
        test('selectOptions', async() => {
        render(
            <select multiple>
            <option value="1">a</option>
            <option value="2">b</option>
            <option value="3">c</option>
             </select>
        )
        await userEvent.selectOptions(screen.getByRole('listbox),['1','c'])
        expect(screen.getByRole('option',{name:'a;}).selected).toBe(true)
        expect(screen.getByRole('option',{name:'b;}).selected).toBe(false)
        expect(screen.getByRole('option',{name:'c;}).selected).toBe(true)
        })
 7.keyboard Apis
  1.cut()
  2.copy()
  3.paste()

Note that wraper componet test.this is important for redux and state management.
    1.we make custom render funtion redux and state management.

            import { render } from '@testing-library/react'
            import { AppProviders } from '../provider/appProvider'



            const customRender = (ui, options) =>
                render(ui, { wrapper: AppProviders, ...options })

            // re-export everything
            export * from '@testing-library/react'

            // override render method
            export { customRender as render }

    2.then we import and call provider funtion in custom render funtion

Note:react hook funtion not return jsx so when we testing react hook.we get error
    .then if we call useCounter() also get error.bcz hook not call in funtion
    .so rtl provide a hook call funtion 
            renderHook()
             test('should render the initial count', () => {
                const { result } = renderHook(useCounter, {
                    initialProps: {
                        initialCount: 0,
                    }
                })
                expect(result.current.count).toBe(0)
            })


Note:fetch funtion test kora onek cost pore tai amder akta server create kore test 
    kora lage ter jonno amader use korte pari mock service worker library tai

    first doc teke msw ta install kori

    1.create server.js 

        // src/mocks/server.js
        import { setupServer } from 'msw/node'
        import { handlers } from './handlers'

        // This configures a request mocking server with the given request handlers.
        export const server = setupServer(...handlers)
    2.create a hander.js file   
        import { rest } from 'msw'

            export const handlers = [
                rest.get('https://jsonplaceholder.typicode.com/users', (req, res, ctx) => {
                    return res(
                        ctx.status(200),
                        ctx.json([
                            {
                                name: 'Bruce Wayne',
                            },
                            {
                                name: 'Clark Kent',
                            },
                            {
                                name: 'Princess Diana',
                            },
                        ])
                    )
                }),
            ]
    3.setupTest.js file e ai ta add kora lagbe

        // src/setupTests.js
        import { server } from '../src/component/httpMock/msw/server'
        // Establish API mocking before all tests.
        beforeAll(() => server.listen())

        // Reset any request handlers that we may add during the tests,
        // so they don't affect other tests.
        afterEach(() => server.resetHandlers())

        // Clean up after the tests are finished.
        afterAll(() => server.close())
    4.complete virtual server make kora akon test korte pari

        test('renders a list of users', async () => {
        render(<Users />)
        const users = await screen.findAllByRole('listitem')
        expect(users).toHaveLength(3)
        })